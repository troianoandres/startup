/**
 *  Mostrar
 */
describe("TweetController tests", function() {

  var tweetLinkMock = null, twitterDateMock = null, $scope = null,
      $state = null, $filter = null, 
      ErrorHandlerService = null, controller = null,
      errorMock = new Error("error"),
      tweetMock = {
        text: "#NoSeQuePoner",
        created_at: "asd"
      };

  beforeEach(function() {

    // Mock the main module dependencies
    angular.mock.module("ui.router");
    angular.mock.module("ui.bootstrap");
    angular.mock.module("ngCookies");
    angular.mock.module("ngSanitize");
    angular.mock.module("app.home");
    angular.mock.module("app.trends");
    angular.mock.module("app.people");
    angular.mock.module("app.statuses");

    // Retrieve the main module
    module("app");

    inject(function(_$rootScope_, _$controller_) {
      
      $scope = _$rootScope_.$new();
      
      $scope.tweet = tweetMock;
      
      $state = {};
      $state.go = jasmine.createSpy();
      
      $filter = jasmine.createSpy().and.callFake(function(filter) {
        if(filter === "tweetLink") {
          return tweetLinkMock;
        } else if(filter === "twitterDate") {
          return twitterDateMock;
        }
      });

      ErrorHandlerService = { };
      ErrorHandlerService.displayError = jasmine.createSpy();

      controller = _$controller_("TweetController", {
        $scope: $scope, 
        $state: $state, 
        $filter: $filter, 
        ErrorHandlerService: ErrorHandlerService
      });

    });

  });

  describe("statements tests", function() {

    beforeEach(function() {
    
      $scope.$digest();

    });

    it("statements must be defined", function() {
      expect(controller).not.toEqual(undefined);
      expect(controller.tweet).not.toEqual(undefined);
      expect(controller.initialize).not.toEqual(undefined);
      expect(controller.showTweetDetail).not.toEqual(undefined);
    });

    it("statements mut be initialized with the correct data", function() {
      expect(controller.tweet).toEqual(tweetMock);
    });

  });

  describe("initialize() tests", function() {

    describe("twitterDateMock will throw error", function() {

      beforeEach(function() {

        tweetLinkMock = function(value) {
          return value;
        };

        tweetLinkMock = jasmine.createSpy();

        //spyOn(tweetLinkMock);

        twitterDateMock = jasmine.createSpy().and.throwError("error");        

      });

      it("initialize will catch the error generated by twitterDateMock", function() {

        controller.initialize();

        expect(tweetLinkMock.calls.count()).toEqual(1);
        expect(twitterDateMock.calls.count()).toEqual(1);
        expect(twitterDateMock).toThrow();
        expect(ErrorHandlerService.displayError.calls.count()).toEqual(1);

      });

    });

    describe("twitterDateMock will throw error", function() {

      beforeEach(function() {

        twitterDateMock = jasmine.createSpy();
        tweetLinkMock = jasmine.createSpy().and.throwError("error");

      });

      it("initialize will catch the error generated by tweetLinkMock", function() {

        controller.initialize();

        expect(tweetLinkMock.calls.count()).toEqual(1);
        expect(tweetLinkMock).toThrow();
        expect(twitterDateMock.calls.count()).toEqual(0);
        expect(ErrorHandlerService.displayError.calls.count()).toEqual(1);

      });

    });

    describe("initialize will format the tweet text and date", function() {

      beforeEach(function() {

        twitterDateMock = jasmine.createSpy().and.returnValue("asd");
        tweetLinkMock = jasmine.createSpy().and.returnValue("asd");

      });

      it("initialize will set the ", function() {

        controller.initialize();

        expect(tweetLinkMock.calls.count()).toEqual(1);
        expect(tweetLinkMock).not.toThrow();
        expect(twitterDateMock.calls.count()).toEqual(1);
        expect(twitterDateMock).not.toThrow()
        expect(ErrorHandlerService.displayError.calls.count()).toEqual(0);
        expect(controller.tweet.text).toEqual("asd");
        expect(controller.tweet.created_at).toEqual("asd");

      });

    });

  });

  describe("showTweetDetail() tests", function() {

    it("ErrorHandlerService.displayError must be called because no tweetID provided", function() {

      controller.showTweetDetail();

      expect(ErrorHandlerService.displayError.calls.count()).toEqual(1);
      expect(ErrorHandlerService.displayError).toHaveBeenCalledWith(new Error("You can't see the details of a non identified tweet"));

    });

    it("$state.go must be called with the tweetID and the app.statuses state", function() {

      var tweetID = 1;

      controller.showTweetDetail(tweetID);

      expect($state.go.calls.count()).toEqual(1);
      expect($state.go).toHaveBeenCalledWith("app.statuses", {statusID: tweetID});

    });

  });

});
